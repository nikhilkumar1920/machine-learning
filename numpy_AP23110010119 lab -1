{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPvsSKJvB4Qsg2H7+FEwtvm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","a = np.array([0, 1, 2])\n","print(type(a))\n","\n","print(a.shape)\n","print(a[0])\n","print(a[1])\n","print(a[2])\n","\n","a[0] = 5\n","print(a)\n","\n","b = np.array([[0,1,2],[3,4,5]])\n","print(b.shape)\n","print(b)\n","print(b[0, 0], b[0, 1], b[1, 0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pS1yb-YHnabJ","executionInfo":{"status":"ok","timestamp":1754475001079,"user_tz":-330,"elapsed":11,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"7e261fc6-0ba3-45de-c81a-f72f8476f587"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'numpy.ndarray'>\n","(3,)\n","0\n","1\n","2\n","[5 1 2]\n","(2, 3)\n","[[0 1 2]\n"," [3 4 5]]\n","0 1 3\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","a = np.zeros((3, 3))\n","print(a)\n","\n","b = np.ones((2, 2))\n","print(b)\n","\n","c = np.full((3, 3), 7)\n","print(c)\n","\n","d = np.random.random((3, 3))\n","print(d)\n","\n","e = np.eye(3)\n","print(e)\n","\n","f = np.array([2, 3, 1, 0])\n","print(f)\n","\n","g = np.arange(20)\n","print(g)\n","\n","h = np.array([[0, 1, 2.0], [0, 0, 0], (1 + 1j, 3., 2.)])\n","print(h)\n","\n","i = np.arange(1, 8, dtype=float)    # âœ… fixed line\n","print(i)\n","\n","j = np.linspace(2, 4, 5)\n","print(j)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"basy76IkoGWb","executionInfo":{"status":"ok","timestamp":1754475001125,"user_tz":-330,"elapsed":48,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"4db9ed15-6744-481f-a9c9-cdb1ca8b0a3c"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0. 0. 0.]\n"," [0. 0. 0.]\n"," [0. 0. 0.]]\n","[[1. 1.]\n"," [1. 1.]]\n","[[7 7 7]\n"," [7 7 7]\n"," [7 7 7]]\n","[[0.14231548 0.42657825 0.6591703 ]\n"," [0.26104339 0.10082592 0.51878717]\n"," [0.20191207 0.06975717 0.3751115 ]]\n","[[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n","[2 3 1 0]\n","[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n","[[0.+0.j 1.+0.j 2.+0.j]\n"," [0.+0.j 0.+0.j 0.+0.j]\n"," [1.+1.j 3.+0.j 2.+0.j]]\n","[1. 2. 3. 4. 5. 6. 7.]\n","[2.  2.5 3.  3.5 4. ]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","x = np.array([0, 1])\n","y = np.array([2.0, 3.0])\n","z = np.array([5, 6], dtype=np.int64)\n","print(x.dtype, y.dtype, z.dtype)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WqlNPXNzrIkd","executionInfo":{"status":"ok","timestamp":1754475001131,"user_tz":-330,"elapsed":21,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"ce96aa10-934b-4001-a27a-045bdfd9a5ab"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["int64 float64 int64\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","arr = np.array([[-1, 2, 0, 4],\n","                [4, -0.5, 6, 0],\n","                [2.6, 0, 7, 8],\n","                [3, -7, 4, 2.0]])\n","\n","temp = arr[:2, ::2]\n","print(\"Array with first 2 rows and alternate columns(0 and 2):\\n\", temp)\n","\n","temp = arr[[0, 1, 2, 3], [3, 2, 1, 0]]\n","print(\"\\nElements at indices (0, 3), (1, 2), (2, 1),(3, 0):\\n\", temp)\n","\n","cond = arr > 0\n","temp = arr[cond]\n","print(\"\\nElements greater than 0:\\n\", temp)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AueAFqrar34t","executionInfo":{"status":"ok","timestamp":1754475001142,"user_tz":-330,"elapsed":15,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"87ebcb8b-4e35-43b7-b9ea-0f85ec8dd15e"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["Array with first 2 rows and alternate columns(0 and 2):\n"," [[-1.  0.]\n"," [ 4.  6.]]\n","\n","Elements at indices (0, 3), (1, 2), (2, 1),(3, 0):\n"," [4. 6. 0. 3.]\n","\n","Elements greater than 0:\n"," [2.  4.  4.  6.  2.6 7.  8.  3.  4.  2. ]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","a = np.array([1, 2, 5, 3])\n","print(\"Adding 1 to every element:\", a + 1)\n","print(\"Subtracting 3 from each element:\", a - 3)\n","print(\"Multiplying each element by 10:\", a * 10)\n","print(\"Squaring each element:\", a ** 2)\n","a *= 2\n","print(\"Doubled each element of original array:\", a)\n","\n","a = np.array([[1, 2, 3], [3, 4, 5], [9, 6, 0]])\n","print(\"\\nOriginal array:\\n\", a)\n","print(\"Transpose of array:\\n\", a.T)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r0urgxawr9b8","executionInfo":{"status":"ok","timestamp":1754475001176,"user_tz":-330,"elapsed":10,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"3c71d1b3-cbea-44e1-842f-7705e9dd5fe6"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["Adding 1 to every element: [2 3 6 4]\n","Subtracting 3 from each element: [-2 -1  2  0]\n","Multiplying each element by 10: [10 20 50 30]\n","Squaring each element: [ 1  4 25  9]\n","Doubled each element of original array: [ 2  4 10  6]\n","\n","Original array:\n"," [[1 2 3]\n"," [3 4 5]\n"," [9 6 0]]\n","Transpose of array:\n"," [[1 3 9]\n"," [2 4 6]\n"," [3 5 0]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","arr = np.array([[1, 5, 6],\n","                [4, 7, 2],\n","                [3, 1, 9]])\n","\n","print(\"Largest element is:\", arr.max())\n","print(\"Row-wise maximum elements:\", arr.max(axis=1))\n","print(\"Column-wise minimum elements:\", arr.min(axis=0))\n","print(\"Sum of all array elements:\", arr.sum())\n","print(\"Cumulative sum along each row:\\n\", arr.cumsum(axis=1))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yXjgfOyesCiT","executionInfo":{"status":"ok","timestamp":1754475001256,"user_tz":-330,"elapsed":81,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"f37612a0-5b1e-479d-ef53-cbc59c7029a9"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["Largest element is: 9\n","Row-wise maximum elements: [6 7 9]\n","Column-wise minimum elements: [1 1 2]\n","Sum of all array elements: 38\n","Cumulative sum along each row:\n"," [[ 1  6 12]\n"," [ 4 11 13]\n"," [ 3  4 13]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","a = np.array([[1, 2],\n","              [3, 4]])\n","b = np.array([[4, 3],\n","              [2, 1]])\n","\n","print(\"Array sum:\\n\", a + b)\n","print(\"Array multiplication:\\n\", a * b)\n","print(\"Matrix multiplication:\\n\", a.dot(b))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9CDXOuFKsLyp","executionInfo":{"status":"ok","timestamp":1754475001264,"user_tz":-330,"elapsed":72,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"7d5370eb-9806-445e-e81b-dedc067ee95c"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["Array sum:\n"," [[5 5]\n"," [5 5]]\n","Array multiplication:\n"," [[4 6]\n"," [6 4]]\n","Matrix multiplication:\n"," [[ 8  5]\n"," [20 13]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","a = np.array([0, np.pi/2, np.pi])\n","print(\"Sine values of array elements:\", np.sin(a))\n","\n","a = np.array([0, 1, 2, 3])\n","print(\"Exponent of array elements:\", np.exp(a))\n","print(\"Square root of array elements:\", np.sqrt(a))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uJYeinlTsP5R","executionInfo":{"status":"ok","timestamp":1754475001274,"user_tz":-330,"elapsed":73,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"28852a07-f85c-4023-d574-285befb5a776"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["Sine values of array elements: [0.0000000e+00 1.0000000e+00 1.2246468e-16]\n","Exponent of array elements: [ 1.          2.71828183  7.3890561  20.08553692]\n","Square root of array elements: [0.         1.         1.41421356 1.73205081]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","arr = np.array([[-1, 2, 0, 4],\n","                [4, -0.5, 6, 0],\n","                [2.6, 0, 7, 8],\n","                [3, -7, 4, 2.0]])\n","\n","inverse = np.linalg.inv(arr)\n","print(inverse)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bn_vdlmCsUIh","executionInfo":{"status":"ok","timestamp":1754475001275,"user_tz":-330,"elapsed":65,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"fd1c5019-f94b-4e29-8755-01b44b7269dc"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 4.05707196  1.98511166 -2.28287841  1.01736973]\n"," [ 0.50620347  0.30272953 -0.24813896 -0.01985112]\n"," [-2.66253102 -1.13151365  1.50124069 -0.67990074]\n"," [ 1.01116625  0.34491315 -0.44665012  0.26426799]]\n"]}]},{"cell_type":"code","source":["data = np.loadtxt(\"C:\\Users\\NIKHIL KUMAR\\Downloads\\fitness (1).txt\", dtype=\"str\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":124},"id":"KuI3_B47yvPd","executionInfo":{"status":"error","timestamp":1754475001278,"user_tz":-330,"elapsed":24,"user":{"displayName":"nikhil kumar | AP23110010119","userId":"05989719804719853882"}},"outputId":"877ae3b1-1f79-4f41-8a11-386a7d88abb2"},"execution_count":80,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"(unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \\UXXXXXXXX escape (ipython-input-3093415284.py, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-3093415284.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    data = np.loadtxt(\"C:\\Users\\NIKHIL KUMAR\\Downloads\\fitness (1).txt\", dtype=\"str\")\u001b[0m\n\u001b[0m                                                                       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n"]}]}]}